[TOC]



# 一.数据库中表、行、列、主键、外键、索引、事务概念

### 表（Table）

- **定义**：表是数据库中用来存储数据的对象，是有结构的数据的集合，是整个数据库系统的基础。
- **概念**：表由行和列组成，每一列都有特定的数据类型和约束，用于存储某种类型的信息，如日期、名称、金额等。表中的数据按行和列的格式组织排列。
- **举例**：一个学生信息表，包含学号、姓名、性别、年龄等列，每行代表一个学生的信息。

### 行（Row）

- **定义**：行也称为记录（Record），是表中的水平部分，代表一个具体的数据实例。
- **概念**：行中存储的是实际的数据值，如某个学生的姓名、年龄等。通常，表中的每一行都应该是唯一的，这可以通过设置主键来实现。
- **举例**：在学生信息表中，一行数据可能是“学号：1001，姓名：张三，性别：男，年龄：20”。

### 列（Column）

- **定义**：列也称为字段（Field），是表中的垂直部分，代表某种特定的属性。
- **概念**：每列都有一个明确的数据类型（如整数、字符串、日期等），并可能包含一些约束条件（如非空、唯一性约束等）。列定义了表中可以存储哪些类型的数据，并对这些数据进行了一定的限制和规范。
- **举例**：在学生信息表中，“姓名”列的数据类型是字符串，“年龄”列的数据类型是整数。

### 主键（Primary Key）

- **定义**：主键是表中用于唯一标识每一行记录的字段或字段组合。
- **概念**：主键的值必须是唯一的，且不能为空。一个表只能有一个主键。主键可以是单列，也可以是多列的组合（复合主键）。
- **举例**：在学生信息表中，学号可以作为主键，因为每个学生的学号是唯一的。

### 外键（Foreign Key）

- **定义**：外键是一个表中的字段，其值引用另一个表的主键。
- **概念**：外键用于建立两个表之间的关联关系，确保数据的引用完整性。通过外键，可以防止在子表中插入不存在于父表中的数据。
- **举例**：假设有一个订单表和一个客户表，订单表中的“客户ID”字段是外键，引用客户表中的“客户ID”主键。

### 索引（Index）

- **定义**：索引是数据库中用于提高查询性能的数据结构。
- **概念**：索引可以加快对表中数据行的检索速度，类似于书的目录。索引可以是单列索引，也可以是多列索引（复合索引）。
- **举例**：在学生信息表中，如果经常根据姓名查询学生信息，可以在“姓名”列上创建索引，以提高查询效率。

### 事务（Transaction）

- **定义**：事务是数据库中一系列的操作，这些操作要么全部成功，要么全部失败。

- **概念**：事务具有ACID特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。原子性确保事务中的所有操作要么全部完成，要么全部不执行；一致性保证事务执行前后数据库的状态保持一致；隔离性确保事务之间相互独立；持久性保证事务提交后，其结果永久保存。

- **举例**：在银行转账操作中，从一个账户扣款和向另一个账户存款必须同时成功或同时失败，否则会导致数据不一致。

  ## 一、ER图的基本概念

  ER图（Entity-Relationship Diagram）是一种用于描述现实世界概念模型的工具，常用于数据库设计和信息系统建模。它通过图形化的方式展示实体、属性和它们之间的关系。

  1. #### **实体（Entities）**

     - **定义**：实体是指客观存在并可相互区分的事物，可以是有形的（如员工、产品）或无形的（如订单、课程）。
     - **概念**：在ER图中，实体用矩形表示，矩形内写明实体的名称。
     - **举例**：在图书馆管理系统中，“书籍”是一个实体，每本书都有其独特的标识，如ISBN号。

  2. #### **属性（Attributes）**

     - **定义**：属性是指实体所具有的每一个特性。
     - **概念**：在ER图中，属性用椭圆表示，并用无向边将其与相应的实体连接起来。主属性名称下加下划线。
     - **举例**：对于“学生”实体，“姓名”、“年龄”、“性别”等都是其属性。

  3. #### **关系（Relationships）**

     - **定义**：关系表示实体之间的连接或关联。
     - **概念**：在ER图中，关系用菱形表示，菱形内写明关系名称，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型（1:1, 1:n 或 m:n）。
     - **举例**：在图书馆管理系统中，“读者”和“书籍”之间存在“借阅”的关系。

  ### 二、ER图的符号和表示方法

  1. #### **矩形表示实体**

     - 实体用矩形表示，矩形内写明实体的名称。
     - **举例**：用一个矩形框表示“学生”，框内写上“学生”字样。

  2. #### **椭圆表示属性**

     - 属性用椭圆表示，椭圆内写属性名称，并通过直线连接到相应的实体。
     - **举例**：用一个椭圆表示“姓名”，并通过直线连接到“学生”矩形。

  3. #### **菱形表示关系**

     - 关系用菱形表示，菱形内写关系名称，并通过直线连接到相关的实体。
     - **举例**：用一个菱形表示“选修”，并通过直线连接“学生”和“课程”两个实体。

  ### 三、ER图的设计步骤

  1. **确定实体**
     - 识别系统中所有相关的实体。
     - **举例**：在学生管理系统中，可能的实体包括“学生”、“课程”、“教师”等。
  2. **确定属性**
     - 为每个实体确定其属性。
     - **举例**：“学生”实体的属性可能包括“学生ID”、“姓名”、“年龄”等。
  3. **确定关系**
     - 确定实体之间的关系。
     - **举例**：“学生”和“课程”之间的关系可以是“选修”，“教师”和“课程”之间的关系可以是“教授”。
  4. **绘制ER图**
     - 使用前面介绍的符号将实体、属性和关系绘制成ER图。

  ### 四、ER图的实例分析

  1. **学生管理系统**
     - **实体**：
       - “学生”，属性包括“学生ID”、“姓名”、“年龄”、“性别”等。
       - “课程”，属性包括“课程ID”、“课程名称”、“学分”等。
       - “教师”，属性包括“教师ID”、“姓名”、“职称”等。
       - “班级”，属性包括“班级ID”、“班级名称”、“班级人数”等。
     - **关系**：
       - 学生与课程之间的“选修”关系，一个学生可以选修多门课程，一门课程可以被多个学生选修。
       - 教师与课程之间的“教授”关系，一个教师可以教授多门课程，一门课程可以由多个教师教授。
       - 学生与班级之间的“属于”关系，一个学生属于一个班级，一个班级可以有多个学生。
  2. **订单管理系统**
     - **实体**：
       - “客户”，属性包括“客户ID”、“姓名”、“地址”等。
       - “订单”，属性包括“订单ID”、“订单日期”、“总金额”等。
       - “产品”，属性包括“产品ID”、“产品名称”、“单价”等。
     - **关系**：
       - 客户与订单之间的“下单”关系，一个客户可以下多个订单，一个订单只能由一个客户下。
       - 订单与产品之间的“包含”关系，一个订单可以包含多个产品，一个产品可以出现在多个订单中。

  ### 五、ER图的优化

  1. **消除冗余**
     - 在设计ER图时，要尽量消除数据冗余。
     - **举例**：不同实体之间重复的属性应当提取到一个独立的实体中。
  2. **规范化**
     - 通过规范化的过程，将数据结构分解为更小、更简单的部分，以减少数据冗余和提高数据一致性。
     - **举例**：将一个包含多个属性的实体拆分为多个实体。
  3. **提高可读性**
     - ER图应当尽量简洁明了，避免过于复杂的图形。
     - **方法**：可以通过适当的布局和注释，提高ER图的可读性和易懂性。

  ### 六、ER图在实际项目中的应用

  1. **项目管理中的角色**
     - 在实际项目管理中，ER图可以帮助团队理解和定义数据库结构，确保所有成员对数据模型有一致的理解。
  2. **使用工具进行项目管理**
     - 在项目管理过程中，可以使用 **研发项目管理系统PingCode** 和 **通用项目协作软件Worktile**。

  ### 七、ER图的常见问题和解决方案

  1. **如何处理多对多关系？**
     - 在ER图中，多对多关系通常通过引入一个中间实体来解决。
     - **举例**：在学生和课程之间的多对多关系中，可以引入一个“选课”实体，将多对多关系分解为两个一对多关系。
  2. **如何处理属性的多值性？**
     - 对于多值属性，可以将其拆分为独立的实体。
     - **举例**：一个员工可能有多个电话号码，可以将电话号码作为一个独立的实体，与员工实体建立一对多关系。
  3. **如何处理复杂的嵌套关系？**
     - 对于复杂的嵌套关系，可以通过逐层分解的方法，将复杂关系分解为简单的关系。
     - **举例**：一个订单可能包含多个产品，每个产品又可能有多个配件，可以将订单、产品和配件分别作为独立的实体，逐层建立关系。

  ### 八、ER图的工具和软件

  1. **ER图设计工具推荐**
     - 目前市面上有许多优秀的ER图设计工具：
       - **MySQL Workbench**：一款免费的数据库设计工具，支持ER图的创建和管理。
       - **Microsoft Visio**：微软出品的专业图表绘制工具，支持各类图表和ER图的设计。
       - **Lucidchart**：一款在线图表绘制工具，支持团队协作和ER图的创建。
  2. **ER图与数据库的集成**
     - 在实际项目中，可以通过ER图与数据库的集成，实现从图形化设计到实际数据库的无缝转换。
     - **举例**：使用MySQL Workbench可以直接将ER图导出为SQL脚本，创建相应的数据库结构。

  ### 九、ER图的最佳实践

  1. **明确需求**
     - 在设计ER图之前，首先要明确需求，了解系统的业务逻辑和数据结构。
     - **方法**：通过与业务人员的沟通，确保对需求有清晰的理解。
  2. **反复迭代**
     - ER图设计是一个反复迭代的过程，在初步设计之后，需要不断进行修改和优化，以确保设计的合理性和完整性。
  3. **团队协作**
     - ER图设计不仅仅是数据库设计师的工作，需要团队成员的协作和参与。
     - **方法**：通过团队讨论和评审，可以发现潜在的问题

# 二.SQL关键字的实际操作示例

### 一、数据查询（DQL）

#### 1. SELECT

**示例**：查询所有学生的信息。

```sql
SELECT * FROM 学生;
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |

#### 2. WHERE

**示例**：查询年龄大于20的学生。

```sql
SELECT * FROM 学生 WHERE 年龄 > 20;
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 3    | 王五 | 男   | 21   |

#### 3. AND/OR

**示例**：查询年龄大于19且性别为男的学生。

```sql
SELECT * FROM 学生 WHERE 年龄 > 19 AND 性别 = '男';
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 3    | 王五 | 男   | 21   |

#### 4. IN

**示例**：查询年龄为19或21的学生。

```sql
SELECT * FROM 学生 WHERE 年龄 IN (19, 21);
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |

#### 5. BETWEEN

**示例**：查询年龄在19到21之间的学生。

```sql
SELECT * FROM 学生 WHERE 年龄 BETWEEN 19 AND 21;
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |

#### 6. LIKE

**示例**：查询姓名以“张”开头的学生。

```sql
SELECT * FROM 学生 WHERE 姓名 LIKE '张%';
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |

#### 7. ORDER BY

**示例**：按年龄升序查询学生信息。

```sql
SELECT * FROM 学生 ORDER BY 年龄;
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 2    | 李四 | 女   | 19   |
| 1    | 张三 | 男   | 20   |
| 3    | 王五 | 男   | 21   |

#### 8. GROUP BY

**示例**：按性别分组统计学生数量。

```sql
SELECT 性别, COUNT(*) AS 学生数量 FROM 学生 GROUP BY 性别;
```

**结果**：

| 性别 | 学生数量 |
| ---- | -------- |
| 男   | 2        |
| 女   | 1        |

#### 9. HAVING

**示例**：按性别分组统计学生数量，只显示数量大于1的组。

```sql
SELECT 性别, COUNT(*) AS 学生数量 FROM 学生 GROUP BY 性别 HAVING COUNT(*) > 1;
```

**结果**：

| 性别 | 学生数量 |
| ---- | -------- |
| 男   | 2        |

#### 10. DISTINCT

**示例**：查询所有不同的性别。

```sql
SELECT DISTINCT 性别 FROM 学生;
```

**结果**：

| 性别 |
| ---- |
| 男   |
| 女   |

#### 11. LIMIT

**示例**：查询前2条学生记录。

```sql
SELECT * FROM 学生 LIMIT 2;
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |

### 二、数据操作（DML）

#### 1. INSERT INTO

**示例**：插入一条新学生记录。

```sql
INSERT INTO 学生 (姓名, 性别, 年龄) VALUES ('赵六', '女', 22);
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |
| 4    | 赵六 | 女   | 22   |

#### 2. UPDATE

**示例**：将学生`赵六`的年龄更新为23。

```sql
UPDATE 学生 SET 年龄 = 23 WHERE 姓名 = '赵六';
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |
| 4    | 赵六 | 女   | 23   |

#### 3. DELETE

**示例**：删除学生`王五`的记录。

```sql
DELETE FROM 学生 WHERE 姓名 = '王五';
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 4    | 赵六 | 女   | 23   |

### 三、数据定义（DDL）

#### 1. CREATE TABLE

**示例**：创建一个新表`选课`。

```sql
CREATE TABLE 选课 (
    选课ID INT PRIMARY KEY AUTO_INCREMENT,
    学号 INT,
    课程号 INT,
    成绩 INT,
    FOREIGN KEY (学号) REFERENCES 学生(学号),
    FOREIGN KEY (课程号) REFERENCES 课程(课程号)
);
```

#### 2. ALTER TABLE

**示例**：向`学生`表中添加一个新列`班级`。

```sql
ALTER TABLE 学生 ADD 班级 VARCHAR(20);
```

**结果**：

| 学号 | 姓名 | 性别 | 年龄 | 班级 |
| ---- | ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   | NULL |
| 2    | 李四 | 女   | 19   | NULL |
| 4    | 赵六 | 女   | 23   | NULL |

#### 3. DROP TABLE

**示例**：删除`选课`表。

```sql
DROP TABLE 选课;
```

### 四、数据控制（DCL）

#### 1. GRANT

**示例**：授予用户`user1`对`学生`表的查询和插入权限。

```sql
GRANT SELECT, INSERT ON 学生 TO user1;
```

#### 2. REVOKE

**示例**：撤销用户`user1`对`学生`表的插入权限。

```sql
REVOKE INSERT ON 学生 FROM user1;
```

### 五、事务控制（TCL）

#### 1. BEGIN TRANSACTION

**示例**：开始一个事务。

```sql
BEGIN TRANSACTION;
```

#### 2. COMMIT

**示例**：提交事务。

```sql
COMMIT;
```

#### 3. ROLLBACK

**示例**：回滚事务。

```sql
ROLLBACK;
```

#### 4. SAVEPOINT

**示例**：设置一个保存点。

```sql
SAVEPOINT my_savepoint;
```

#### 5. RELEASE SAVEPOINT

**示例**：释放保存点。

```sql
RELEASE SAVEPOINT my_savepoint;
```

---

## 六、其他关键字

#### 1. AS

**示例**：为列名或表名指定别名。

```sql
SELECT 姓名 AS name, 年龄 AS age FROM 学生 AS students;
```

**结果**：

| name | age  |
| ---- | ---- |
| 张三 | 20   |
| 李四 | 19   |
| 赵六 | 23   |

#### 2. JOIN

**示例**：使用`INNER JOIN`连接`学生`表和`课程`表。

```sql
SELECT 学生.姓名, 课程.课程名
FROM 学生
INNER JOIN 选课 ON 学生.学号 = 选课.学号
INNER JOIN 课程 ON 选课.课程号 = 课程.课程号;
```

#### 3. UNION

**示例**：合并两个查询结果。

```sql
SELECT 姓名 FROM 学生
UNION
SELECT 课程名 FROM 课程;
```

#### 4. EXISTS

**示例**：检查是否存在选修了`数学`课程的学生。

```sql
SELECT * FROM 学生
WHERE EXISTS (SELECT * FROM 选课 WHERE 学生.学号 = 选课.学号 AND 选课.课程号 = 1);
```

#### 5. CASE

非常抱歉之前的回答中遗漏了对`CASE`命令的详细解释和示例。接下来我将详细解释`CASE`命令的用法，并通过实际操作示例来展示它的功能和返回结果。

---

## `CASE`命令的用法及返回结果

### 一、`CASE`命令的基本语法

`CASE`命令是一种条件表达式，用于在SQL查询中实现条件逻辑。它类似于编程语言中的`if-else`或`switch-case`语句。`CASE`命令可以用于`SELECT`语句中，根据条件返回不同的值。

#### 基本语法

```sql
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    ...
    ELSE resultN
END
```

- `WHEN condition THEN result`：指定条件和对应的返回值。
- `ELSE resultN`：如果没有条件匹配，则返回默认值。
- `END`：结束`CASE`表达式。

### 二、`CASE`命令的返回结果

`CASE`命令会根据条件逐个检查，返回第一个满足条件的结果。如果没有条件匹配，则返回`ELSE`部分的值。如果没有任何条件匹配且没有`ELSE`部分，则返回`NULL`。

### 三、`CASE`命令的实际操作示例

假设我们有以下`学生`表：

| 学号 | 姓名 | 性别 | 年龄 |
| ---- | ---- | ---- | ---- |
| 1    | 张三 | 男   | 20   |
| 2    | 李四 | 女   | 19   |
| 3    | 王五 | 男   | 21   |
| 4    | 赵六 | 女   | 22   |

#### 示例 1：根据年龄分组学生

**SQL语句**

```sql
SELECT 姓名, 年龄,
       CASE
           WHEN 年龄 < 20 THEN '未成年'
           WHEN 年龄 >= 20 THEN '成年'
           ELSE '未知'
       END AS 年龄分组
FROM 学生;
```

**结果**

| 姓名 | 年龄 | 年龄分组 |
| ---- | ---- | -------- |
| 张三 | 20   | 成年     |
| 李四 | 19   | 未成年   |
| 王五 | 21   | 成年     |
| 赵六 | 22   | 成年     |

#### 示例 2：根据性别和年龄分组学生

**SQL语句**

```sql
SELECT 姓名, 性别, 年龄,
       CASE
           WHEN 性别 = '男' AND 年龄 >= 20 THEN '成年男性'
           WHEN 性别 = '男' AND 年龄 < 20 THEN '未成年男性'
           WHEN 性别 = '女' AND 年龄 >= 20 THEN '成年女性'
           WHEN 性别 = '女' AND 年龄 < 20 THEN '未成年女性'
           ELSE '未知'
       END AS 分组
FROM 学生;
```

**结果**

| 姓名 | 性别 | 年龄 | 分组       |
| ---- | ---- | ---- | ---------- |
| 张三 | 男   | 20   | 成年男性   |
| 李四 | 女   | 19   | 未成年女性 |
| 王五 | 男   | 21   | 成年男性   |
| 赵六 | 女   | 22   | 成年女性   |

#### 示例 3：计算成绩等级

假设我们还有一个`选课`表，记录学生的选课成绩：

| 选课ID | 学号 | 课程号 | 成绩 |
| ------ | ---- | ------ | ---- |
| 1      | 1    | 1      | 85   |
| 2      | 2    | 2      | 90   |
| 3      | 3    | 1      | 78   |
| 4      | 4    | 3      | 92   |

**SQL语句**

```sql
SELECT 学号, 课程号, 成绩,
       CASE
           WHEN 成绩 >= 90 THEN '优秀'
           WHEN 成绩 >= 80 THEN '良好'
           WHEN 成绩 >= 70 THEN '中等'
           WHEN 成绩 >= 60 THEN '及格'
           ELSE '不及格'
       END AS 等级
FROM 选课;
```

**结果**

| 选课ID | 学号 | 课程号 | 成绩 | 等级 |
| ------ | ---- | ------ | ---- | ---- |
| 1      | 1    | 1      | 85   | 良好 |
| 2      | 2    | 2      | 90   | 优秀 |
| 3      | 3    | 1      | 78   | 中等 |
| 4      | 4    | 3      | 92   | 优秀 |

### 四、`CASE`命令的注意事项

1. **条件顺序**：`CASE`命令会按顺序检查每个条件，返回第一个满足条件的结果。因此，条件的顺序很重要。
2. **默认值**：如果没有条件匹配，`CASE`命令会返回`ELSE`部分的值。如果没有`ELSE`部分，则返回`NULL`。
3. **数据类型**：`CASE`命令的所有结果必须是兼容的数据类型。例如，如果一个结果是字符串，另一个结果是数字，则可能会导致错误。

### 五、`CASE`命令的应用场景

`CASE`命令在以下场景中非常有用：

1. **数据分类**：根据条件对数据进行分类，例如按年龄、性别、成绩等分类。
2. **数据转换**：将一个字段的值转换为另一个值，例如将数字成绩转换为等级。
3. **动态排序**：在`ORDER BY`子句中使用`CASE`命令，根据特定条件动态排序。
4. **聚合函数**：在`GROUP BY`或`HAVING`子句中使用`CASE`命令，实现复杂的分组和过滤逻辑。

---

## 一、聚合函数

聚合函数用于对一组值进行计算，并返回单个值。

### 1. `COUNT`

- **作用**：返回匹配特定条件的行数。

- **示例**：

  ```sql
  SELECT COUNT(*) FROM 学生;
  ```

  **结果**：返回学生表中的总行数。

### 2. `SUM`

- **作用**：返回数值列的总和。

- **示例**：

  ```sql
  SELECT SUM(成绩) FROM 选课;
  ```

  **结果**：返回选课表中所有成绩的总和。

### 3. `AVG`

- **作用**：返回数值列的平均值。

- **示例**：

  ```sql
  SELECT AVG(成绩) FROM 选课;
  ```

  **结果**：返回选课表中所有成绩的平均值。

### 4. `MAX`

- **作用**：返回某列的最大值。

- **示例**：

  ```sql
  SELECT MAX(成绩) FROM 选课;
  ```

  **结果**：返回选课表中成绩的最大值。

### 5. `MIN`

- **作用**：返回某列的最小值。

- **示例**：

  ```sql
  SELECT MIN(成绩) FROM 选课;
  ```

  **结果**：返回选课表中成绩的最小值。

---

## 二、日期和时间函数

日期和时间函数用于处理日期和时间数据。

### 1. `NOW`

- **作用**：返回当前日期和时间。

- **示例**：

  ```sql
  SELECT NOW();
  ```

  **结果**：返回当前日期和时间，例如`2025-03-23 14:30:00`。

### 2. `CURDATE`

- **作用**：返回当前日期。

- **示例**：

  ```sql
  SELECT CURDATE();
  ```

  **结果**：返回当前日期，例如`2025-03-23`。

### 3. `CURTIME`

- **作用**：返回当前时间。

- **示例**：

  ```sql
  SELECT CURTIME();
  ```

  **结果**：返回当前时间，例如`14:30:00`。

### 4. `DATE_ADD`

- **作用**：在日期上添加指定的时间间隔。

- **示例**：

  ```sql
  SELECT DATE_ADD(CURDATE(), INTERVAL 1 YEAR);
  ```

  **结果**：返回当前日期加1年的日期，例如`2026-03-23`。

### 5. `DATE_SUB`

- **作用**：从日期中减去指定的时间间隔。

- **示例**：

  ```sql
  SELECT DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
  ```

  **结果**：返回当前日期减1年的日期，例如`2024-03-23`。

---

## 三、字符串函数

字符串函数用于处理字符串数据。

### 1. `LENGTH`

- **作用**：返回字符串的长度（以字节为单位）。

- **示例**：

  ```sql
  SELECT LENGTH(姓名) FROM 学生;
  ```

  **结果**：返回每个学生姓名的长度。

### 2. `CHAR_LENGTH`

- **作用**：返回字符串的长度（以字符为单位）。

- **示例**：

  ```sql
  SELECT CHAR_LENGTH(姓名) FROM 学生;
  ```

  **结果**：返回每个学生姓名的长度。

### 3. `UPPER`

- **作用**：将字符串转换为大写。

- **示例**：

  ```sql
  SELECT UPPER(姓名) FROM 学生;
  ```

  **结果**：返回每个学生姓名的大写形式。

### 4. `LOWER`

- **作用**：将字符串转换为小写。

- **示例**：

  ```sql
  SELECT LOWER(姓名) FROM 学生;
  ```

  **结果**：返回每个学生姓名的小写形式。

### 5. `CONCAT`

- **作用**：连接两个或多个字符串。

- **示例**：

  ```sql
  SELECT CONCAT(姓名, ' ', 性别) FROM 学生;
  ```

  **结果**：返回每个学生的姓名和性别的组合，例如`张三 男`。

### 6. `SUBSTRING`

- **作用**：从字符串中提取子字符串。

- **示例**：

  ```sql
  SELECT SUBSTRING(姓名, 1, 1) FROM 学生;
  ```

  **结果**：返回每个学生姓名的第一个字符。

---

## 四、数学函数

数学函数用于执行数学计算。

### 1. `ABS`

- **作用**：返回数字的绝对值。

- **示例**：

  ```sql
  SELECT ABS(-10);
  ```

  **结果**：返回`10`。

### 2. `CEIL`

- **作用**：返回大于或等于给定数字的最小整数。

- **示例**：

  ```sql
  SELECT CEIL(3.14);
  ```

  **结果**：返回`4`。

### 3. `FLOOR`

- **作用**：返回小于或等于给定数字的最大整数。

- **示例**：

  ```sql
  SELECT FLOOR(3.14);
  ```

  **结果**：返回`3`。

### 4. `ROUND`

- **作用**：返回按指定小数位数四舍五入的数字。

- **示例**：

  ```sql
  SELECT ROUND(3.14159, 2);
  ```

  **结果**：返回`3.14`。

### 5. `RAND`

- **作用**：返回一个随机浮点值，范围在`0`到`1`之间。

- **示例**：

  ```sql
  SELECT RAND();
  ```

  **结果**：返回一个随机浮点值，例如`0.8452`。

---

## 五、其他常见参数及其含义

### （一）`ENGINE`

#### 1. 含义

- **作用**：指定表的存储引擎。
- **常见存储引擎**：
  - `InnoDB`：支持事务处理、行级锁定和外键。
  - `MyISAM`：不支持事务处理，但读取速度较快。
  - `MEMORY`：数据存储在内存中，速度快但数据在重启后丢失。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
) ENGINE=InnoDB;
```

### （二）`CHARACTER SET`

#### 1. 含义

- **作用**：指定表的字符集。
- **常见字符集**：
  - `utf8`：支持多语言字符，但不支持所有 Unicode 字符。
  - `utf8mb4`：支持完整的 Unicode 字符集，包括表情符号。
  - `latin1`：西欧字符集，适合英语和西欧语言。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
) CHARACTER SET utf8mb4;
```

### （三）`COLLATE`

#### 1. 含义

- **作用**：指定字符集的排序规则。
- **常见排序规则**：
  - `utf8mb4_general_ci`：通用排序规则，大小写不敏感。
  - `utf8mb4_unicode_ci`：基于 Unicode 的排序规则，更精确。
  - `utf8mb4_bin`：二进制排序规则，大小写敏感。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```

### （四）`AUTO_INCREMENT`

#### 1. 含义

- **作用**：指定字段的值自动递增，通常用于主键字段。
- **默认值**：从1开始递增，但可以通过`AUTO_INCREMENT`参数指定起始值。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
) AUTO_INCREMENT=100;
```

### （五）`DEFAULT`

#### 1. 含义

- **作用**：指定字段的默认值，如果在插入数据时没有指定该字段的值，则使用默认值。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT DEFAULT 18
);
```

### （六）`NOT NULL`

#### 1. 含义

- **作用**：指定字段的值不能为`NULL`。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
);
```

### （七）`UNIQUE`

#### 1. 含义

- **作用**：指定字段的值必须是唯一的。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    邮箱 VARCHAR(100) UNIQUE,
    年龄 INT
);
```

### （八）`CHECK`

#### 1. 含义

- **作用**：指定字段的值必须满足某个条件。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL CHECK (性别 IN ('男', '女')),
    年龄 INT CHECK (年龄 >= 18)
);
```

### （九）`FOREIGN KEY`

#### 1. 含义

- **作用**：指定字段为外键，外键字段的值必须在另一个表的主键字段中存在。

#### 2. 示例

```sql
CREATE TABLE 选课 (
    选课ID INT PRIMARY KEY AUTO_INCREMENT,
    学号 INT,
    课程号 INT,
    成绩 INT,
    FOREIGN KEY (学号) REFERENCES 学生(学号) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (课程号) REFERENCES 课程(课程号) ON DELETE CASCADE ON UPDATE CASCADE
);
```

### （十）`INDEX`

#### 1. 含义

- **作用**：为表创建索引，提高查询效率。

#### 2. 示例

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT,
    INDEX (年龄)
);
```

### （十一）`FULLTEXT`

#### 1. 含义

- **作用**：为表创建全文索引，支持全文搜索。

#### 2. 示例

```sql
CREATE TABLE 文章 (
    文章ID INT PRIMARY KEY AUTO_INCREMENT,
    标题 VARCHAR(255),
    内容 TEXT,
    FULLTEXT (标题, 内容)
);
```

### （十二）`TEMPORARY`

#### 1. 含义

- **作用**：创建临时表，临时表只在当前会话中存在，会话结束后自动删除。

#### 2. 示例

```sql
CREATE TEMPORARY TABLE 临时学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
);
```

---

## 二、完整示例

假设我们要创建一个`学生`表和一个`课程`表，并设置外键约束、字符集、排序规则等。

### 学生表

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL CHECK (性别 IN ('男', '女')),
    年龄 INT CHECK (年龄 >= 18),
    邮箱 VARCHAR(100) UNIQUE,
    班级 VARCHAR(50) DEFAULT '未分配'
) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```

### 课程表

```sql
CREATE TABLE 课程 (
    课程号 INT PRIMARY KEY AUTO_INCREMENT,
    课程名 VARCHAR(50) NOT NULL,
    学分 INT CHECK (学分 > 0)
) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```

### 选课表

```sql
CREATE TABLE 选课 (
    选课ID INT PRIMARY KEY AUTO_INCREMENT,
    学号 INT,
    课程号 INT,
    成绩 INT CHECK (成绩 BETWEEN 0 AND 100),
    FOREIGN KEY (学号) REFERENCES 学生(学号) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (课程号) REFERENCES 课程(课程号) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
```

---

## 三、总结

在创建表时，可以使用多种参数和约束来定义表的结构和行为。这些参数包括：

- **`ENGINE`**：指定存储引擎。
- **`CHARACTER SET`**：指定字符集。
- **`COLLATE`**：指定排序规则。
- **`AUTO_INCREMENT`**：指定字段的值自动递增。
- **`DEFAULT`**：指定字段的默认值。
- **`NOT NULL`**：指定字段的值不能为`NULL`。
- **`UNIQUE`**：指定字段的值必须是唯一的。
- **`CHECK`**：指定字段的值必须满足某个条件。
- **`FOREIGN KEY`**：指定字段为外键。
- **`INDEX`**：为表创建索引。
- **`FULLTEXT`**：为表创建全文







## 六、示例

假设我们有以下`学生`表和`选课`表：

### 学生表

```sql
CREATE TABLE 学生 (
    学号 INT PRIMARY KEY AUTO_INCREMENT,
    姓名 VARCHAR(50) NOT NULL,
    性别 VARCHAR(10) NOT NULL,
    年龄 INT
);

INSERT INTO 学生 (姓名, 性别, 年龄) VALUES 
('张三', '男', 20),
('李四', '女', 19),
('王五', '男', 21);
```

### 选课表

```sql
CREATE TABLE 选课 (
    选课ID INT PRIMARY KEY AUTO_INCREMENT,
    学号 INT,
    课程号 INT,
    成绩 INT,
    FOREIGN KEY (学号) REFERENCES 学生(学号)
);

INSERT INTO 选课 (学号, 课程号, 成绩) VALUES 
(1, 101, 85),
(2, 102, 90),
(3, 101, 78);
```

### 使用聚合函数

```sql
SELECT COUNT(*) AS 学生总数 FROM 学生;
SELECT SUM(成绩) AS 总成绩 FROM 选课;
SELECT AVG(成绩) AS 平均成绩 FROM 选课;
SELECT MAX(成绩) AS 最高成绩 FROM 选课;
SELECT MIN(成绩) AS 最低成绩 FROM 选课;
```

### 使用日期和时间函数

```sql
SELECT NOW() AS 当前日期时间;
SELECT CURDATE() AS 当前日期;
SELECT CURTIME() AS 当前时间;
SELECT DATE_ADD(CURDATE(), INTERVAL 1 YEAR) AS 明年日期;
SELECT DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AS 去年日期;
```

### 使用字符串函数

```sql
SELECT LENGTH(姓名) AS 姓名长度 FROM 学生;
SELECT CHAR_LENGTH(姓名) AS 姓名字符长度 FROM 学生;
SELECT UPPER(姓名) AS 姓名大写 FROM 学生;
SELECT LOWER(姓名) AS 姓名小写 FROM 学生;
SELECT CONCAT(姓名, ' ', 性别) AS 姓名性别 FROM 学生;
SELECT SUBSTRING(姓名, 1, 1) AS 姓名首字母 FROM 学生;
```

### 使用数学函数

```sql
SELECT ABS(-10) AS 绝对值;
SELECT CEIL(3.14) AS 向上取整;
SELECT FLOOR(3.14) AS 向下取整;
SELECT ROUND(3.14159, 2) AS 四舍五入;
SELECT RAND() AS 随机数;
```

---

## 
